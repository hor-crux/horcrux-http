define(["require", "exports"], function (require, exports) {
    var Ajax = (function () {
        function Ajax(url) {
            this.url = url;
            this.xhttp = new XMLHttpRequest();
        }
        Ajax.prototype.send = function (method, data) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.xhttp.onreadystatechange = function (_) {
                    if (_this.xhttp.readyState == 4) {
                        if (_this.xhttp.status == 200) {
                            resolve(_this.response());
                        }
                        else {
                            reject(_this.response());
                        }
                    }
                };
                _this.xhttp.open(method, _this.url, true);
                !!data ? _this.xhttp.send(data) : _this.xhttp.send();
            });
        };
        Ajax.prototype.response = function () {
            try {
                return JSON.parse(this.xhttp.response);
            }
            catch (e) {
                return this.xhttp.response;
            }
        };
        return Ajax;
    })();
    var METHOD = {
        GET: "GET",
        POST: "POST",
        PUT: "PUT",
        DELETE: "DELETE",
        PATCH: "PATCH"
    };
    var Http = (function () {
        function Http() {
        }
        Http.get = function (url) {
            return new Ajax(url).send(METHOD.GET);
        };
        Http.post = function (url, data) {
            return new Ajax(url).send(METHOD.POST, data);
        };
        Http.put = function (url, data) {
            return new Ajax(url).send(METHOD.PUT, data);
        };
        Http.delete = function (url, data) {
            return new Ajax(url).send(METHOD.DELETE, data);
        };
        Http.patch = function (url, data) {
            return new Ajax(url).send(METHOD.PATCH, data);
        };
        return Http;
    })();
    exports.Http = Http;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHAudHMiXSwibmFtZXMiOlsiQWpheCIsIkFqYXguY29uc3RydWN0b3IiLCJBamF4LnNlbmQiLCJBamF4LnJlc3BvbnNlIiwiSHR0cCIsIkh0dHAuY29uc3RydWN0b3IiLCJIdHRwLmdldCIsIkh0dHAucG9zdCIsIkh0dHAucHV0IiwiSHR0cC5kZWxldGUiLCJIdHRwLnBhdGNoIl0sIm1hcHBpbmdzIjoiO0lBQUE7UUFJQ0EsY0FBb0JBLEdBQVVBO1lBQVZDLFFBQUdBLEdBQUhBLEdBQUdBLENBQU9BO1lBQzdCQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxjQUFjQSxFQUFFQSxDQUFDQTtRQUNuQ0EsQ0FBQ0E7UUFFTUQsbUJBQUlBLEdBQVhBLFVBQVlBLE1BQWFBLEVBQUVBLElBQVNBO1lBQXBDRSxpQkFpQkNBO1lBaEJBQSxNQUFNQSxDQUFDQSxJQUFJQSxPQUFPQSxDQUFDQSxVQUFDQSxPQUFPQSxFQUFFQSxNQUFNQTtnQkFFbENBLEtBQUlBLENBQUNBLEtBQUtBLENBQUNBLGtCQUFrQkEsR0FBR0EsVUFBQUEsQ0FBQ0E7b0JBQ2hDQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxVQUFVQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFDaENBLEVBQUVBLENBQUFBLENBQUNBLEtBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLElBQUlBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBOzRCQUM3QkEsT0FBT0EsQ0FBQ0EsS0FBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7d0JBQzFCQSxDQUFDQTt3QkFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7NEJBQ0xBLE1BQU1BLENBQUNBLEtBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBLENBQUNBO3dCQUN6QkEsQ0FBQ0E7b0JBQ0ZBLENBQUNBO2dCQUNGQSxDQUFDQSxDQUFBQTtnQkFFREEsS0FBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsS0FBSUEsQ0FBQ0EsR0FBR0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3hDQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFHQSxLQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxLQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNwREEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDSkEsQ0FBQ0E7UUFFT0YsdUJBQVFBLEdBQWhCQTtZQUNDRyxJQUFJQSxDQUFDQTtnQkFDSkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFDeENBLENBQUVBO1lBQUFBLEtBQUtBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNYQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUM1QkEsQ0FBQ0E7UUFDRkEsQ0FBQ0E7UUFFRkgsV0FBQ0E7SUFBREEsQ0FuQ0EsQUFtQ0NBLElBQUE7SUFFRCxJQUFJLE1BQU0sR0FBRztRQUNaLEdBQUcsRUFBRSxLQUFLO1FBQ1YsSUFBSSxFQUFFLE1BQU07UUFDWixHQUFHLEVBQUUsS0FBSztRQUNWLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLEtBQUssRUFBRSxPQUFPO0tBRWQsQ0FBQTtJQUNEO1FBQUFJO1FBd0JBQyxDQUFDQTtRQXRCT0QsUUFBR0EsR0FBVkEsVUFBV0EsR0FBVUE7WUFDcEJFLE1BQU1BLENBQUNBLElBQUlBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3ZDQSxDQUFDQTtRQUVNRixTQUFJQSxHQUFYQSxVQUFZQSxHQUFVQSxFQUFFQSxJQUFTQTtZQUNoQ0csTUFBTUEsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDOUNBLENBQUNBO1FBRU1ILFFBQUdBLEdBQVZBLFVBQVdBLEdBQVVBLEVBQUVBLElBQVNBO1lBQy9CSSxNQUFNQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUM3Q0EsQ0FBQ0E7UUFFTUosV0FBTUEsR0FBYkEsVUFBY0EsR0FBVUEsRUFBRUEsSUFBU0E7WUFDbENLLE1BQU1BLENBQUNBLElBQUlBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ2hEQSxDQUFDQTtRQUVNTCxVQUFLQSxHQUFaQSxVQUFhQSxHQUFVQSxFQUFFQSxJQUFTQTtZQUNqQ00sTUFBTUEsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDL0NBLENBQUNBO1FBSUZOLFdBQUNBO0lBQURBLENBeEJBLEFBd0JDQSxJQUFBO0lBRU8sWUFBSSxRQUZYO0lBRVkiLCJmaWxlIjoiaHR0cC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEFqYXgge1xyXG5cdFxyXG5cdHByaXZhdGUgeGh0dHA6IFhNTEh0dHBSZXF1ZXN0O1xyXG5cdFxyXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgdXJsOnN0cmluZykge1xyXG5cdFx0dGhpcy54aHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgc2VuZChtZXRob2Q6c3RyaW5nLCBkYXRhPzphbnkpOiBQcm9taXNlPGFueT4ge1xyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0XHJcblx0XHRcdHRoaXMueGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gXyA9PiB7XHJcblx0XHRcdFx0aWYgKHRoaXMueGh0dHAucmVhZHlTdGF0ZSA9PSA0KSB7XHJcblx0XHRcdFx0XHRpZih0aGlzLnhodHRwLnN0YXR1cyA9PSAyMDApIHtcclxuXHRcdFx0XHRcdFx0cmVzb2x2ZSh0aGlzLnJlc3BvbnNlKCkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdHJlamVjdCh0aGlzLnJlc3BvbnNlKCkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0dGhpcy54aHR0cC5vcGVuKG1ldGhvZCwgdGhpcy51cmwsIHRydWUpO1xyXG5cdFx0XHQhIWRhdGEgPyB0aGlzLnhodHRwLnNlbmQoZGF0YSkgOiB0aGlzLnhodHRwLnNlbmQoKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHRwcml2YXRlIHJlc3BvbnNlKCk6IGFueSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRyZXR1cm4gSlNPTi5wYXJzZSh0aGlzLnhodHRwLnJlc3BvbnNlKTtcclxuXHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy54aHR0cC5yZXNwb25zZTtcclxuXHRcdH1cclxuXHR9XHJcbiAgXHRcdFxyXG59XHJcblxyXG5sZXQgTUVUSE9EID0ge1xyXG5cdEdFVDogXCJHRVRcIixcclxuXHRQT1NUOiBcIlBPU1RcIixcclxuXHRQVVQ6IFwiUFVUXCIsXHJcblx0REVMRVRFOiBcIkRFTEVURVwiLFxyXG5cdFBBVENIOiBcIlBBVENIXCJcclxuXHJcbn1cclxuY2xhc3MgSHR0cCB7XHJcblx0XHJcblx0c3RhdGljIGdldCh1cmw6c3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuXHRcdHJldHVybiBuZXcgQWpheCh1cmwpLnNlbmQoTUVUSE9ELkdFVCk7XHJcblx0fVxyXG5cdFxyXG5cdHN0YXRpYyBwb3N0KHVybDpzdHJpbmcsIGRhdGE/OmFueSk6IFByb21pc2U8YW55PiB7XHJcblx0XHRyZXR1cm4gbmV3IEFqYXgodXJsKS5zZW5kKE1FVEhPRC5QT1NULCBkYXRhKTtcclxuXHR9XHJcblx0XHJcblx0c3RhdGljIHB1dCh1cmw6c3RyaW5nLCBkYXRhPzphbnkpOiBQcm9taXNlPGFueT4ge1xyXG5cdFx0cmV0dXJuIG5ldyBBamF4KHVybCkuc2VuZChNRVRIT0QuUFVULCBkYXRhKTtcclxuXHR9XHJcblx0XHJcblx0c3RhdGljIGRlbGV0ZSh1cmw6c3RyaW5nLCBkYXRhPzphbnkpOiBQcm9taXNlPGFueT4ge1xyXG5cdFx0cmV0dXJuIG5ldyBBamF4KHVybCkuc2VuZChNRVRIT0QuREVMRVRFLCBkYXRhKTtcclxuXHR9XHJcblx0XHJcblx0c3RhdGljIHBhdGNoKHVybDpzdHJpbmcsIGRhdGE/OmFueSk6IFByb21pc2U8YW55PiB7XHJcblx0XHRyZXR1cm4gbmV3IEFqYXgodXJsKS5zZW5kKE1FVEhPRC5QQVRDSCwgZGF0YSk7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdFxyXG59XHJcblxyXG5leHBvcnQge0h0dHB9Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
