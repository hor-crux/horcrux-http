define(["require", "exports"], function (require, exports) {
    var Ajax = (function () {
        function Ajax(url, options) {
            this.url = url;
            this.options = {};
            this.xhttp = new XMLHttpRequest();
            if (!!options) {
                if (!!options.contentType)
                    this.options.contentType = options.contentType;
            }
        }
        Ajax.prototype.send = function (method, data) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.xhttp.onreadystatechange = function (_) {
                    if (_this.xhttp.readyState == 4) {
                        if (_this.xhttp.status == 200) {
                            resolve(_this.response());
                        }
                        else {
                            reject(_this.response());
                        }
                    }
                };
                //detect options based on data.
                if (!!data) {
                    if (!_this.options.contentType) {
                        if (typeof data === "object") {
                            _this.options.contentType = "application/json";
                        }
                        else if (typeof data === "string") {
                            _this.options.contentType = "text/plain";
                        }
                    }
                }
                _this.xhttp.open(method, _this.url, true);
                if (_this.options.contentType)
                    _this.xhttp.setRequestHeader("Content-type", _this.options.contentType);
                !!data ? _this.xhttp.send(_this.payload(data)) : _this.xhttp.send();
            });
        };
        Ajax.prototype.payload = function (data) {
            if (typeof data === "object")
                return JSON.stringify(data);
            else if (data instanceof Array)
                return JSON.stringify(data);
            else
                return data;
        };
        Ajax.prototype.response = function () {
            try {
                return JSON.parse(this.xhttp.response);
            }
            catch (e) {
                return this.xhttp.response;
            }
        };
        return Ajax;
    })();
    exports.Ajax = Ajax;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXgudHMiXSwibmFtZXMiOlsiQWpheCIsIkFqYXguY29uc3RydWN0b3IiLCJBamF4LnNlbmQiLCJBamF4LnBheWxvYWQiLCJBamF4LnJlc3BvbnNlIl0sIm1hcHBpbmdzIjoiO0lBRUE7UUFLQ0EsY0FBb0JBLEdBQVVBLEVBQUVBLE9BQW9CQTtZQUFoQ0MsUUFBR0EsR0FBSEEsR0FBR0EsQ0FBT0E7WUFGdEJBLFlBQU9BLEdBQWdCQSxFQUFFQSxDQUFDQTtZQUdqQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsY0FBY0EsRUFBRUEsQ0FBQ0E7WUFDbENBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO2dCQUNkQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxDQUFDQTtvQkFDeEJBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFdBQVdBLEdBQUdBLE9BQU9BLENBQUNBLFdBQVdBLENBQUNBO1lBQ2pEQSxDQUFDQTtRQUNGQSxDQUFDQTtRQUVNRCxtQkFBSUEsR0FBWEEsVUFBWUEsTUFBYUEsRUFBRUEsSUFBU0E7WUFBcENFLGlCQWlDQ0E7WUFoQ0FBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLFVBQUNBLE9BQU9BLEVBQUVBLE1BQU1BO2dCQUVsQ0EsS0FBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxVQUFBQSxDQUFDQTtvQkFDaENBLEVBQUVBLENBQUNBLENBQUNBLEtBQUlBLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO3dCQUNoQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsS0FBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQzdCQSxPQUFPQSxDQUFDQSxLQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxDQUFDQTt3QkFDMUJBLENBQUNBO3dCQUNEQSxJQUFJQSxDQUFDQSxDQUFDQTs0QkFDTEEsTUFBTUEsQ0FBQ0EsS0FBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7d0JBQ3pCQSxDQUFDQTtvQkFDRkEsQ0FBQ0E7Z0JBQ0ZBLENBQUNBLENBQUFBO2dCQUVEQSwrQkFBK0JBO2dCQUMvQkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ1hBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLEtBQUlBLENBQUNBLE9BQU9BLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBO3dCQUM5QkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsT0FBT0EsSUFBSUEsS0FBS0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQzdCQSxLQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxHQUFHQSxrQkFBa0JBLENBQUNBO3dCQUMvQ0EsQ0FBQ0E7d0JBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUFBLENBQUNBLE9BQU9BLElBQUlBLEtBQUtBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBOzRCQUNsQ0EsS0FBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsV0FBV0EsR0FBR0EsWUFBWUEsQ0FBQ0E7d0JBQ3pDQSxDQUFDQTtvQkFDRkEsQ0FBQ0E7Z0JBQ0ZBLENBQUNBO2dCQUVEQSxLQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxLQUFJQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFFeENBLEVBQUVBLENBQUFBLENBQUNBLEtBQUlBLENBQUNBLE9BQU9BLENBQUNBLFdBQVdBLENBQUNBO29CQUMzQkEsS0FBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxjQUFjQSxFQUFFQSxLQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtnQkFFdkVBLENBQUNBLENBQUNBLElBQUlBLEdBQUdBLEtBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEtBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBLEdBQUdBLEtBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1lBQ2xFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNKQSxDQUFDQTtRQUVPRixzQkFBT0EsR0FBZkEsVUFBZ0JBLElBQVFBO1lBQ3ZCRyxFQUFFQSxDQUFBQSxDQUFDQSxPQUFPQSxJQUFJQSxLQUFLQSxRQUFRQSxDQUFDQTtnQkFDM0JBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQzdCQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxZQUFZQSxLQUFLQSxDQUFDQTtnQkFDN0JBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQzdCQSxJQUFJQTtnQkFDSEEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDZEEsQ0FBQ0E7UUFFT0gsdUJBQVFBLEdBQWhCQTtZQUNDSSxJQUFJQSxDQUFDQTtnQkFDSkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFDeENBLENBQUVBO1lBQUFBLEtBQUtBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNYQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUM1QkEsQ0FBQ0E7UUFDRkEsQ0FBQ0E7UUFFRkosV0FBQ0E7SUFBREEsQ0FqRUEsQUFpRUNBLElBQUE7SUFFTyxZQUFJLFFBRlg7SUFFYSIsImZpbGUiOiJhamF4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cE9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xyXG5cclxuY2xhc3MgQWpheCB7XHJcblx0XHJcblx0cHJpdmF0ZSB4aHR0cDogWE1MSHR0cFJlcXVlc3Q7XHJcblx0cHJpdmF0ZSBvcHRpb25zOiBIdHRwT3B0aW9ucyA9IHt9O1xyXG5cdFxyXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgdXJsOnN0cmluZywgb3B0aW9ucz86SHR0cE9wdGlvbnMpIHtcclxuXHRcdHRoaXMueGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHRcdGlmKCEhb3B0aW9ucykge1xyXG5cdFx0XHRpZighIW9wdGlvbnMuY29udGVudFR5cGUpXHJcblx0XHRcdFx0dGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlID0gb3B0aW9ucy5jb250ZW50VHlwZTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0cHVibGljIHNlbmQobWV0aG9kOnN0cmluZywgZGF0YT86YW55KTogUHJvbWlzZTxhbnk+IHtcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdFxyXG5cdFx0XHR0aGlzLnhodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IF8gPT4ge1xyXG5cdFx0XHRcdGlmICh0aGlzLnhodHRwLnJlYWR5U3RhdGUgPT0gNCkge1xyXG5cdFx0XHRcdFx0aWYodGhpcy54aHR0cC5zdGF0dXMgPT0gMjAwKSB7XHJcblx0XHRcdFx0XHRcdHJlc29sdmUodGhpcy5yZXNwb25zZSgpKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRyZWplY3QodGhpcy5yZXNwb25zZSgpKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdC8vZGV0ZWN0IG9wdGlvbnMgYmFzZWQgb24gZGF0YS5cclxuXHRcdFx0aWYoISFkYXRhKSB7XHJcblx0XHRcdFx0aWYoIXRoaXMub3B0aW9ucy5jb250ZW50VHlwZSkge1xyXG5cdFx0XHRcdFx0aWYodHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlID0gXCJhcHBsaWNhdGlvbi9qc29uXCI7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMub3B0aW9ucy5jb250ZW50VHlwZSA9IFwidGV4dC9wbGFpblwiO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBcclxuXHRcdFx0XHJcblx0XHRcdHRoaXMueGh0dHAub3BlbihtZXRob2QsIHRoaXMudXJsLCB0cnVlKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKHRoaXMub3B0aW9ucy5jb250ZW50VHlwZSlcclxuXHRcdFx0XHR0aGlzLnhodHRwLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgdGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlKTtcclxuXHRcdFx0XHJcblx0XHRcdCEhZGF0YSA/IHRoaXMueGh0dHAuc2VuZCh0aGlzLnBheWxvYWQoZGF0YSkpIDogdGhpcy54aHR0cC5zZW5kKCk7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0cHJpdmF0ZSBwYXlsb2FkKGRhdGE6YW55KTogc3RyaW5nIHtcclxuXHRcdGlmKHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiKVxyXG5cdFx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XHJcblx0XHRlbHNlIGlmKGRhdGEgaW5zdGFuY2VvZiBBcnJheSlcclxuXHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gZGF0YTtcclxuXHR9XHJcblx0XHJcblx0cHJpdmF0ZSByZXNwb25zZSgpOiBhbnkge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0cmV0dXJuIEpTT04ucGFyc2UodGhpcy54aHR0cC5yZXNwb25zZSk7XHJcblx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMueGh0dHAucmVzcG9uc2U7XHJcblx0XHR9XHJcblx0fVxyXG4gIFx0XHRcclxufVxyXG5cclxuZXhwb3J0IHtBamF4fTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
