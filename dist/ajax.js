define(["require", "exports"], function (require, exports) {
    var Ajax = (function () {
        function Ajax(url, options) {
            this.url = url;
            this.options = {};
            this.xhttp = new XMLHttpRequest();
            if (!!options) {
                if (!!options.contentType)
                    this.options.contentType = options.contentType;
            }
        }
        Ajax.prototype.send = function (method, data) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.xhttp.onreadystatechange = function (_) {
                    if (_this.xhttp.readyState == 4) {
                        if (_this.xhttp.status == 200) {
                            resolve(_this.response());
                        }
                        else {
                            reject(_this.response());
                        }
                    }
                };
                //detect options based on data.
                if (!!data) {
                    if (!_this.options.contentType) {
                        if (typeof data === "object") {
                            _this.options.contentType = "application/json";
                        }
                        else if (typeof data === "string") {
                            _this.options.contentType = "text/plain";
                        }
                    }
                }
                _this.xhttp.open(method, _this.url, true);
                if (_this.options.contentType)
                    _this.xhttp.setRequestHeader("Content-type", _this.options.contentType);
                !!data ? _this.xhttp.send(data) : _this.xhttp.send();
            });
        };
        Ajax.prototype.response = function () {
            try {
                return JSON.parse(this.xhttp.response);
            }
            catch (e) {
                return this.xhttp.response;
            }
        };
        return Ajax;
    })();
    exports.Ajax = Ajax;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFqYXgudHMiXSwibmFtZXMiOlsiQWpheCIsIkFqYXguY29uc3RydWN0b3IiLCJBamF4LnNlbmQiLCJBamF4LnJlc3BvbnNlIl0sIm1hcHBpbmdzIjoiO0lBRUE7UUFLQ0EsY0FBb0JBLEdBQVVBLEVBQUVBLE9BQW9CQTtZQUFoQ0MsUUFBR0EsR0FBSEEsR0FBR0EsQ0FBT0E7WUFGdEJBLFlBQU9BLEdBQWdCQSxFQUFFQSxDQUFDQTtZQUdqQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsY0FBY0EsRUFBRUEsQ0FBQ0E7WUFDbENBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO2dCQUNkQSxFQUFFQSxDQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxDQUFDQTtvQkFDeEJBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFdBQVdBLEdBQUdBLE9BQU9BLENBQUNBLFdBQVdBLENBQUNBO1lBQ2pEQSxDQUFDQTtRQUNGQSxDQUFDQTtRQUVNRCxtQkFBSUEsR0FBWEEsVUFBWUEsTUFBYUEsRUFBRUEsSUFBU0E7WUFBcENFLGlCQWlDQ0E7WUFoQ0FBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLFVBQUNBLE9BQU9BLEVBQUVBLE1BQU1BO2dCQUVsQ0EsS0FBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxVQUFBQSxDQUFDQTtvQkFDaENBLEVBQUVBLENBQUNBLENBQUNBLEtBQUlBLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO3dCQUNoQ0EsRUFBRUEsQ0FBQUEsQ0FBQ0EsS0FBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQzdCQSxPQUFPQSxDQUFDQSxLQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxDQUFDQTt3QkFDMUJBLENBQUNBO3dCQUNEQSxJQUFJQSxDQUFDQSxDQUFDQTs0QkFDTEEsTUFBTUEsQ0FBQ0EsS0FBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7d0JBQ3pCQSxDQUFDQTtvQkFDRkEsQ0FBQ0E7Z0JBQ0ZBLENBQUNBLENBQUFBO2dCQUVEQSwrQkFBK0JBO2dCQUMvQkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ1hBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLEtBQUlBLENBQUNBLE9BQU9BLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBO3dCQUM5QkEsRUFBRUEsQ0FBQUEsQ0FBQ0EsT0FBT0EsSUFBSUEsS0FBS0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQzdCQSxLQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxHQUFHQSxrQkFBa0JBLENBQUNBO3dCQUMvQ0EsQ0FBQ0E7d0JBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUFBLENBQUNBLE9BQU9BLElBQUlBLEtBQUtBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBOzRCQUNsQ0EsS0FBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsV0FBV0EsR0FBR0EsWUFBWUEsQ0FBQ0E7d0JBQ3pDQSxDQUFDQTtvQkFDRkEsQ0FBQ0E7Z0JBQ0ZBLENBQUNBO2dCQUVEQSxLQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxLQUFJQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFFeENBLEVBQUVBLENBQUFBLENBQUNBLEtBQUlBLENBQUNBLE9BQU9BLENBQUNBLFdBQVdBLENBQUNBO29CQUMzQkEsS0FBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxjQUFjQSxFQUFFQSxLQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtnQkFFdkVBLENBQUNBLENBQUNBLElBQUlBLEdBQUdBLEtBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLEtBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1lBQ3BEQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNKQSxDQUFDQTtRQUVPRix1QkFBUUEsR0FBaEJBO1lBQ0NHLElBQUlBLENBQUNBO2dCQUNKQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUN4Q0EsQ0FBRUE7WUFBQUEsS0FBS0EsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1hBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBO1lBQzVCQSxDQUFDQTtRQUNGQSxDQUFDQTtRQUVGSCxXQUFDQTtJQUFEQSxDQXhEQSxBQXdEQ0EsSUFBQTtJQUVPLFlBQUksUUFGWDtJQUVhIiwiZmlsZSI6ImFqYXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XHJcblxyXG5jbGFzcyBBamF4IHtcclxuXHRcclxuXHRwcml2YXRlIHhodHRwOiBYTUxIdHRwUmVxdWVzdDtcclxuXHRwcml2YXRlIG9wdGlvbnM6IEh0dHBPcHRpb25zID0ge307XHJcblx0XHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSB1cmw6c3RyaW5nLCBvcHRpb25zPzpIdHRwT3B0aW9ucykge1xyXG5cdFx0dGhpcy54aHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0aWYoISFvcHRpb25zKSB7XHJcblx0XHRcdGlmKCEhb3B0aW9ucy5jb250ZW50VHlwZSlcclxuXHRcdFx0XHR0aGlzLm9wdGlvbnMuY29udGVudFR5cGUgPSBvcHRpb25zLmNvbnRlbnRUeXBlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgc2VuZChtZXRob2Q6c3RyaW5nLCBkYXRhPzphbnkpOiBQcm9taXNlPGFueT4ge1xyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0XHJcblx0XHRcdHRoaXMueGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gXyA9PiB7XHJcblx0XHRcdFx0aWYgKHRoaXMueGh0dHAucmVhZHlTdGF0ZSA9PSA0KSB7XHJcblx0XHRcdFx0XHRpZih0aGlzLnhodHRwLnN0YXR1cyA9PSAyMDApIHtcclxuXHRcdFx0XHRcdFx0cmVzb2x2ZSh0aGlzLnJlc3BvbnNlKCkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdHJlamVjdCh0aGlzLnJlc3BvbnNlKCkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Ly9kZXRlY3Qgb3B0aW9ucyBiYXNlZCBvbiBkYXRhLlxyXG5cdFx0XHRpZighIWRhdGEpIHtcclxuXHRcdFx0XHRpZighdGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlKSB7XHJcblx0XHRcdFx0XHRpZih0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIikge1xyXG5cdFx0XHRcdFx0XHR0aGlzLm9wdGlvbnMuY29udGVudFR5cGUgPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgaWYodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlID0gXCJ0ZXh0L3BsYWluXCI7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IFxyXG5cdFx0XHRcclxuXHRcdFx0dGhpcy54aHR0cC5vcGVuKG1ldGhvZCwgdGhpcy51cmwsIHRydWUpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYodGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlKVxyXG5cdFx0XHRcdHRoaXMueGh0dHAuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCB0aGlzLm9wdGlvbnMuY29udGVudFR5cGUpO1xyXG5cdFx0XHRcclxuXHRcdFx0ISFkYXRhID8gdGhpcy54aHR0cC5zZW5kKGRhdGEpIDogdGhpcy54aHR0cC5zZW5kKCk7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0cHJpdmF0ZSByZXNwb25zZSgpOiBhbnkge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0cmV0dXJuIEpTT04ucGFyc2UodGhpcy54aHR0cC5yZXNwb25zZSk7XHJcblx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMueGh0dHAucmVzcG9uc2U7XHJcblx0XHR9XHJcblx0fVxyXG4gIFx0XHRcclxufVxyXG5cclxuZXhwb3J0IHtBamF4fTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
